scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
library RefundableCrowdsale
let equal_int=
  fun(a : Uint128) => fun(b:Uint128) =>
  let equal= builtin eq a b in
  match equal with
  | True =>True
  | False =>False
  end
let zero = Uint128 0
let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}
let active = Uint128 1
let closed = Uint128 0
let refunding = Uint128 2
let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end
let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract RefundableCrowdsale
(payee : ByStr20,
 deposits : Uint128,
 _rate:Uint128,
 state : Uint128,
 goal : Uint128)
 (*_rate is the conversion rate of zil to tokens*)
 (*token contains the tokens that are initialised by payee and that are credited upon purchase by investor.*)
(*payee is the owner of token who can withdraw zil raised if goal is achieved.*)
(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)
(*all_deposits contails the zil balance of the user.*)
field all_deposits : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m payee zero
field token : Map ByStr20 Uint128 = 
  let n = Emp ByStr20 Uint128 in 
    builtin put n payee deposits
field _state : Uint128 = state
field bene_zil_bal : Uint128 = zero
field bene_tok_bal : Uint128 = zero
      
(*closed() transition changes the state from active to closed if the goal is reached ,can only be accessed the payee*)
      
transition closed()
  isPrimary=builtin eq _sender payee;
  st1 <- _state;
  isstate=builtin eq st1 closed;
  match isstate with
  | False =>      
    bl<-all_deposits;
    zilraised <- all_deposits[_sender];
    match isPrimary with 
    | True =>
      match zilraised with
      | Some x =>
        israised=le_int goal x;
        match israised with
        | True =>
          st <- _state;
          cl=builtin sub st active;  
          _state := cl ; 
          e = { _eventname : "closed"; _recipient : _sender; _amount : Uint128 0; status : "closed(goal acheived)" };
          event e
        | False=>
          e = { _eventname : "goalNotAchieved"; _recipient : _sender; _amount : Uint128 0; status : "goal not acheived" };
          event e    
        end
      | None =>
        e = { _eventname : "noZil"; _recipient : _sender; _amount : Uint128 0; message : "no zil found" };
        event e  
      end  
    | False =>
      e = { _eventname : "notOwner"; _recipient : _sender; _amount : Uint128 0; message : "only payee can change the state of Crowdsale" };
      event e  
    end
  | True =>
    e = { _eventname : "alreadyCLosed"; _recipient : _sender; _amount : Uint128 0; message : "state is already closed" };
    event e
  end    
end    
(*closed() transition changes the state from active to refunding if the goal is not reached ,can only be accessed the payee*)
transition refunding()

  isPrimary=builtin eq _sender payee;
  bl<-all_deposits;
  zilraised <-all_deposits[_sender];
  match isPrimary with 
  | True =>
    match zilraised with
    | Some x =>
      israised=builtin lt x goal;
      match israised with
      | True =>
        st <- _state;
        cl=builtin add st active;  
        _state := cl ;
        e = { _eventname : "refund"; _recipient : _sender; _amount : Uint128 0; status : "refunding" };
        event e
      | False=>
        e = { _eventname : "goalAchieved"; _recipient : _sender; _amount : Uint128 0; status : "goal already achieved" };
        event e    
      end
    | None =>
      e = { _eventname : "noZil"; _recipient : _sender; _amount : Uint128 0; message : "no zil found" };
      event e  
    end  
  | False =>
    e = { _eventname : "notOwner"; _recipient : _sender; _amount : Uint128 0; message : "only payee can change the state of Crowdsale" };
    event e  
  end
end
  


transition deposit ()
st <- _state;
isState=builtin eq st active;
match isState with
| True =>
  accept ;
  dep=_amount ;
  bl <- all_deposits;
  s <- token;
   
  val = builtin eq _sender payee;
  match val with
  | False =>
    accept ;
    val1=equal_int dep zero;
    match val1 with 
    | False =>
      number_of_token = builtin mul _rate dep; 
      payee_tok_bal <- token[payee];
      match payee_tok_bal with
      | Some x =>
        can_do=le_int number_of_token x;
        match can_do with
        | True =>
          p = number_of_token;
          payee_tok_bal1=builtin sub x p;          
          token[payee]:= payee_tok_bal1;
          tk <- token[_sender];
          match tk with 
          | Some x =>
            new_to_tk_bal=builtin add x number_of_token;            
            token[_sender] := new_to_tk_bal
          | None =>            
            token[_sender] := number_of_token;
          to_bal <- all_deposits[payee];
          match to_bal with
          | Some x =>
            new_to_bal = builtin add x dep;           
            all_deposits[payee] := new_to_bal            
          | None =>            
            all_deposits[payee]:= dep
          end;
          
          e = { _eventname : "purchasedSuccessfully"; _recipient : _sender; _amount : Uint128 0; message : "tokens purchased successfully" };        
          event e                 
          end          
        | False =>
          e = { _tag : "insufficientTokens"; _recipient : _sender; _amount : Uint128 0; message : "not enough tokens left for sale" };
          event e  
        end  
      | None =>
        e = { _tag : "noTokenBalance"; _recipient : _sender; _amount : Uint128 0; message : "payee token balance not found" };
        event e 
      end
    | True =>
      e = { _tag : "zeroDeposit"; _recipient : _sender; _amount : Uint128 0; message : "deposit amount cannot be zero" };
      event e   
    end      
  | True =>
    e = { _tag : "owner"; _recipient : _sender; _amount : Uint128 0; message : "token owner cannot purchase tokens" };
    event e  
  end     
| False =>
  e = { _tag : "notActive"; _recipient : _sender; _amount : Uint128 0; message : "state is not active" };
  event e     
end
end      

(*beneficiaryWithdraw() allows the investor to withdraw the investment if state of the sale has been changed to refunding.*)
transition beneficiaryWithdraw()
  st <- _state;
  s <- token;
  bl <- all_deposits;
  isState=builtin eq st refunding;
  (*tokens debited from beneficiary and credided back to payee(token owner)*)
  match isState with
  | True =>
    can_do=builtin eq payee _sender;
    match can_do with
    | False=>
      beneficiary_tok_bal=builtin get s _sender;      
      match beneficiary_tok_bal with             
      | Some x=>         
        beneficiary_zil_bal=builtin div x _rate;
        bene_zil_bal := beneficiary_zil_bal;
        bene_zil_return <- bene_zil_bal;
        beneficiary_tok_bal_new=builtin mul zero x;        
        token[_sender] := beneficiary_tok_bal_new;
        payee_tok_bal <- token[payee];
        match payee_tok_bal with
        | Some p =>
          payee_tok_bal1=builtin add p x;          
          token[payee] := payee_tok_bal1;
          bene_zil_bal1 <- all_deposits[_sender]             
        | None =>  
          payee_tok_bal_new=builtin put s payee x;
          token[payee] := x;
        msg = { _tag : "Main"; _recipient : _sender; _amount : bene_zil_return ; message : "refunded" };
        msgs = one_msg msg;
        send msgs  
        end  
      | None =>
        e = { _eventname : "noTokens"; _recipient : _sender; _amount : Uint128 0; message : "tokens not found" };
        event e
      end         
    | True =>
      e = { _eventname : "notBeneficiary"; _recipient : _sender; _amount : Uint128 0; message : "token owner cannot be a beneficiary" };
      event e
    end    
  | False =>      
    e = { _eventname : "notRefunding"; _recipient : _sender; _amount : Uint128 0; message : "Not in a refunding state" };
    event e
  end
end    
  
(*withdrawPrimary() transition allows the owner to withdraw the zil raised if the goal has been achieved.*)
transition withdrawPrimary (withdrawalamount : Uint128)
  st<-_state;
  msg2="not primary";
  isPrimary=builtin eq _sender payee;
  match isPrimary with
  | True =>
    isState=builtin eq st closed;
    match isState with
    | True =>          
      bl <- all_deposits;
      bal <- all_deposits[_sender];
      match bal with
      | Some b =>
        can_do = le_int withdrawalamount b;
        match can_do with
        | True =>
          (* subtract withdrawalamount from pprimary  and add it to  _sender*)
          new_sender_bal = builtin sub b withdrawalamount;          
          all_deposits[_sender] := new_Sender_bal;          
          e = { _eventname : "withdrawPrimary"; _recipient : _sender; _amount : withdrawalamount ; transferred : withdrawalamount };
          event e          
        | False =>
          (* balance not sufficient. *)
          e = { _eventname : "balInsufficient"; _recipient : _sender; _amount : Uint128 0; message : "balance not sufficient" };
          event e          
        end
      | None =>
        (* no balance record, can't transfer *)
        e = { _eventname : "noZilBalance"; _recipient : _sender; _amount : Uint128 0; message : "no zil balanc found" };
        event e
      end
    | False=>        
      e= { _eventname : "notClosed"; _recipient : _sender; _amount : Uint128 0; message : "state is not closed" };    
      event e      
    end            
  | False =>
    e = {_eventname : "TransferFailure"; sender : _sender;  amount : Uint128 0};
    event e     
  end  
end
