scilla_version 0

(* This contract implements a fungible token interface a la ERC777.*)

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils

library ERC777Token 

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
    
(*constant*)
let _zero = Uint128 0

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ERC777Token 
(name:String ,
 symbol: String,
 totalSupply:Uint128,
 owner : ByStr20,
 granularity: Uint128)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)
field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m owner totalSupply
field allowed : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field _totalSupply: Uint128 = totalSupply
 
transition name()
  e = { _eventname : "TokenName"; tokenName : name };
  event e
end

transition symbol()
 e = { _eventname : "Symbol"; symbol : symbol };
 event e
end

transition granularity()
 e = { _eventname : "Granularity"; tokenGranularity : granularity};
 event e
end

transition totalSupply ()
  t<-_totalSupply;
 e = { _eventname : "TotalSupply"; totalSupply : t };
 event e
 end

transition balanceOf (tokenOwner : ByStr20)
  val <- balances[tokenOwner];
  match val with
  | Some v =>
    e = { _eventname : "BalanceOf"; tokenOwner : tokenOwner; balance : v };
    event e
  | None =>
    e = { _eventname : "BalanceOf"; tokenOwner : tokenOwner; balance : _zero };
    event e
  end
end

transition authorizeOperator (operator : ByStr20)
  noauth="not an operator";
  is_operator=builtin eq operator _sender;
  match is_operator with
    | True=>
       e = { _eventname : "Error"; from : _sender ; operator : operator; status : noauth };
       event e
    | False=>
       allowed[operator][_sender] := totalSupply;
       e = { _eventname : "AuthorizeOperator"; from : _sender ; operator : operator };
       event e
    end
 end

transition revokeOperator (operator : ByStr20)
    auth="revoked";
    noauth="revoke failed";
    al <- allowed;
    is_operator=builtin eq operator _sender;
    match is_operator with
    | True=>
      e = { _eventname : "Error"; from : _sender ; operator : operator; status : noauth };
      event e
    | False=>
      delete allowed[operator][_sender];
      e = { _eventname : "AuthorizeOperator"; from : _sender ; operator : operator };
      event e
      end
end

transition isOperatorFor ( operator : ByStr20, tokenHolder : ByStr20)
  is_op="Operator found";
  is_no_op="Operator found failed";
  has_operator <- exists allowed[operator][tokenHolder];
  match has_operator with
   | True =>
      e = { _eventname : "IsOperatorFor"; from : _sender ; operator : operator; tokenHolder : tokenHolder; status: is_op};
      event e
   | False =>
      e = { _eventname : "IsOperatorFor"; from : _sender ; operator : operator; tokenHolder : tokenHolder; status: is_no_op};
      event e
    end
 end

transition Send (to : ByStr20 , amount : Uint128 , _userData : String)
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notGranular="Not granular";
inSuffBal="insufficient balance";
noBal="No balance for _sender";
isMultiple=builtin eq isMultiple2 amount ;
 match  isMultiple with
  | True =>
  bal <- balances[_sender];
  match bal with
  | Some b =>
    can_do = le_int amount b;
    match can_do with
    | True =>
      (* subtract amount from _sender and add it to to *)
      new_sender_bal = builtin sub b amount;
      balances[_sender]:=new_sender_bal;
      to_bal <- balances[to];
      match to_bal with
        | Some x =>
           new_to_bal = builtin add x amount;
           balances[to] := new_to_bal;
           e = { _eventname : "SentToken"; from : _sender ; to : to ; userData : _userData ; amount : amount   };
           event e
        | None =>
           balances[to] := amount;
           e = { _eventname : "SentToken"; from : _sender ; to : to ; userData : _userData ; amount : amount   };
           event e
           end
    | False =>
      (* balance not sufficient. *)
       	e = { _eventname : "Send Error"; from : _sender ; to : to ; userData : _userData ; amount : amount ; code : inSuffBal  };
        event e
    end
  | None =>
    (* no balance record, can't transfer *)
     e = { _eventname : "Send Error"; from : _sender ; to : to ; userData : _userData ; amount : amount ; code : noBal  };
     event e
   end
   | False =>
     e = { _eventname : "Send Error"; from : _sender ; to : to ; userData : _userData ; amount : amount ; code : notGranular  };
     event e
   end
end


transition operatorSend (from : ByStr20, to : ByStr20, amount : Uint128 , userData : String , operatorData : String)
balFrom <- balances[from];
balTo <- balances[to];
al <- allowed;
allowed_from <- allowed [_sender][from];
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
isSender1=builtin eq to _sender ;
isSender=builtin eq from _sender ;
notgranular="Not granular";
m_disallowed = "sender not allowed";
isMultiple=builtin eq isMultiple2 amount ;
match isMultiple with
  | True =>
  match isSender with
   | True=>
     e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : m_disallowed  };
     event e
   | False=>  
     match isSender1 with
      | True=>
        e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : m_disallowed  };
        event e
      | False=>  
        (* Check if _sender has been authorized where _sender here is an operator who can transfer from "_from" to "to" *)
        match allowed_from with
          |Some alFrom=>
            match balFrom with
            | Some b =>
            (* We can only transfer the minimum of available or authorized tokens *)
            t = min_int alFrom b;
            can_do = le_int amount t;
            match can_do with
            | True =>
              (* tokens is what we should subtract from "from" and add to "to" *)
              new_from_bal = builtin sub b amount;
              balances[from] := new_from_bal;
              match balTo with
              | Some tb =>
                to_bal_new = builtin add tb amount;
                balances[to] := to_bal_new;
                new_allowed = builtin sub alFrom amount;
                allowed[_sender][from] := new_allowed;
                e = { _eventname : "OperatorSent"; from : _sender ; to : to ; amount : amount ; userData : userData ; operatorData : operatorData };
                event e
              | None =>
                (* "to" has no balance. So just set it to amount *)
              balances[to] := amount;
              new_allowed = builtin sub alFrom amount;
              allowed [_sender][from]:= new_allowed;
              e = { _eventname : "OperatorSent"; from : _sender ; to : to ; amount : amount ; userData : userData ; operatorData : operatorData };
              event e
              end
              (* reduce "allowed" by "amount" *)
            | False =>
               e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : "Token amount is more"  };
              event e
            end
         | None =>
           e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : "from account has no balance"  };
           event e
          end
     | None =>
        e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : m_disallowed  };
        event e
        end
     end
   end
  | False =>
     e = { _eventname : "Operator Error"; from : _sender ; amount : amount  ; code : notgranular  };
     event e
     end
end

transition Burn (amount : Uint128 , data : String)
isMultiple1= builtin div amount granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notgranular="Not granular";
insuffBal="Balance insuffuciient";
noBal="No balance record";
t<-_totalSupply;
isMultiple=builtin eq isMultiple2 amount ;
 match  isMultiple with
  | True =>
  bal <- balances[_sender];
  match bal with
  | Some b =>
    can_do = le_int amount b;
    match can_do with
    | True =>
      (* subtract amount from _sender and add it to to *)
      new_sender_bal = builtin sub b amount;
      balances[_sender] := new_sender_bal;
      _newSupply=builtin sub t amount;
      _totalSupply:=_newSupply;
      e = { _eventname : "Burnt"; owner: _sender ; amount : _amount ; data : data };
      event e	
    | False =>
      (* balance not sufficient. *)
      e = { _eventname : "Burn Error"; from : _sender  ; code : insuffBal  };
      event e
     end
  | None =>
    (* no balance record, can't transfer *)
    e = { _eventname : "Burn Error"; from : _sender ; code : noBal  };
    event e
   end
| False =>
    e = { _eventname : "Burn Error"; from : _sender ; code : notgranular  };
    event e
end
end

transition operatorBurn (from : ByStr20, amount : Uint128 , userData : String , operatorData : String)
allowed_from <-allowed [_sender][from];
balFrom <- balances[from];
ts <-_totalSupply;
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notgranular="Not granular";
m_disallowed = "Transfer not allowed";
isMultiple=builtin eq isMultiple2 amount ;
match  isMultiple with
 | True =>
   isSender=builtin eq from _sender ;
   match isSender with
   | True =>
    e = { _eventname : "Operator Burn Error"; from : _sender ; code : m_disallowed  };
    event e
   | False =>  
    (* Check if _sender has been authorized where _sender here is an operator who can transfer from "_from" to "to" *)
    match allowed_from with
     | Some m =>
      match balFrom with
      | Some m1 =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int m m1;
      can_do = le_int amount t;
      match can_do with
      | True =>
        (* tokens is what we should subtract from "from"  *)
        new_from_bal = builtin sub m1 amount;
        balances[from] := new_from_bal;
        (* total supply in circulation is also decreased  *)
        _newSupply=builtin sub ts amount;
        _totalSupply:=_newSupply;
        new_allowed = builtin sub m1 amount;
        allowed[_sender][from] := new_allowed;
        e = { _eventname : "Operator Burnt"; sender: _sender; from : from ; amount : amount ; userData : userData ; operatorData : operatorData };
        event e
      | False =>
        e = { _eventname : "Operator Burn Error"; from : _sender ; code : "Token amount is more"  };
        event e
      end
     | None =>
      e = { _eventname : "Operator Burn Error"; from : _sender ; code : "from has no balance"  };
      event e
      end
    | None =>
    e = { _eventname : "Operator Burn Error"; from : _sender ; code : m_disallowed  };
    event e
    end
  end
| False =>
  e = { _eventname : "Operator Burn Error"; from : _sender ; code : notgranular  };
  event e
end
end
