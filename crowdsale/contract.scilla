scilla_version 0

library CrowdSale

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg



(* Constants *)
let _zero   = Uint128 0

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract CrowdSale
(_wallet : ByStr20,
_rate    : Uint128)

  (* How many token units a buyer gets per zil.*)
  (* The rate is the conversion between zil and the smallest and indivisible token unit.*)
  (* So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK*)
  (* 1 zil will give you 1 unit*)

field tokensRaised : Uint128 = Uint128 0

(*shows which beneficiary has how many tokens*)
field sale : Map ByStr20 Uint128 = Emp ByStr20 Uint128

(*balance of owner in zil*)
field owner_balance : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m _wallet _zero


transition buyTokens (beneficiary: ByStr20) 
s <- sale;
ob <- owner_balance;
zeroAmtError="zero _amount";
notMultiple="Not a multiple of rate";
walletErr = "wallet cant be beneficiary";
zilAmount = builtin div _amount _rate ;
tr <-tokensRaised;
(*isMultiple = if ((amt/rate)*rate == amt)*)
isMultiple1= builtin div _amount  _rate;
isMultiple2= builtin mul isMultiple1  _rate;
isMultiple=builtin eq isMultiple2 _amount ;
isWallet = builtin eq beneficiary _wallet;
isZilZero = builtin eq zilAmount _zero;
  match isWallet with
  | False =>
      match isZilZero with
     | False =>
       match isMultiple with
        | True =>
        accept;
        new_tokensRaised = builtin add tr zilAmount;
        tokensRaised := new_tokensRaised;
        sale[beneficiary] := zilAmount;
        (*wallet balance*)
        old_owner_bal <- owner_balance [_wallet];
        match old_owner_bal with
            | Some v =>
              newBal=builtin add v _amount;
              (*wallet balance updated*)
              owner_balance [_wallet]:= newBal ;
              e = { _eventname : "BuyTokens"; from : _sender; beneficiary : beneficiary; amount : _amount };
 	      event e 
            | None =>
              (*wallet balance updated*)
              owner_balance [_wallet] := _amount ;
              e = { _eventname : "BuyTokens"; from : _sender; beneficiary : beneficiary; amount : _amount };
 	      event e 
            end
         | False =>
           e = { _eventname : "Error"; from : _sender;  error : notMultiple  };
 	   event e 
          end
     | True =>
        e = { _eventname : "Error"; from : _sender;  error : zeroAmtError  };
      	event e 
       end
  | True =>
    e = { _eventname : "Error"; from : _sender;  error : walletErr  };
    event e 
  end
  end

transition wallet()
 e = { _eventname : "Wallet"; wallet : _wallet; from : _sender  };
 event e 
end

(* @return the number of token units a buyer gets per zil.*)
transition rate()
 e = { _eventname : "Rate"; rate : _rate; from : _sender  };
 event e 
end

  (*@return the amount of tokens raised.*)
transition tokensRaised ()
 t<-tokensRaised;
 e = { _eventname : "TokensRaised"; tokens : t; from : _sender  };
 event e 
end
