scilla_version 0

(* This contract implements a Escrow contract*)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Escrow

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
 
(*constant*)
let _zero = Uint128 0   

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Escrow
(primary: ByStr20,
 payee : ByStr20)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)
field all_deposits : Map ByStr20 Uint128 =
   Emp ByStr20 Uint128 
(*may be initialized here by removing from immutable variable*)
field _primary: ByStr20 = primary

transition primary()
   p <- _primary;
   e = { _eventname : "Primary";  from : _sender ; primary : p   };
   event e
 end
  
transition transferPrimary(recipient : ByStr20)
   p <- _primary;
   notPrimary = "not primary";
   isPrimary=builtin eq _sender p;
   match isPrimary with
    | True =>
      _primary := recipient;
       e = { _eventname : "Transfer Primary";  from : _sender ; recipient : recipient   };
       event e
    | False =>
       e = { _eventname : "Error";  from : _sender ; code : notPrimary  };
      event e
     end
end
  
transition depositsOf (payee : ByStr20)
  val <- all_deposits[payee];
  match val with
  | Some v =>
    e = { _eventname : "DepositsOf";  from : _sender ; payee : payee ; deposits : v  };
    event e
  | None =>
    e = { _eventname : "DepositsOf";  from : _sender ; payee : payee ; deposits : _zero  };
    event e
  end
end


transition deposit (payee : ByStr20)
 deposits=_amount;
 p <- _primary;
 notPrimary="not primary";
 bal <- all_deposits[_sender];
 to_bal <- all_deposits[payee];
 isPrimary=builtin eq _sender p;
 match isPrimary with
 | True =>
  accept;
  match bal with
  | Some b =>
      (* subtract deposit from _sender and add it to payee *)
      new_sender_bal = builtin sub b deposits;
      all_deposits[payee] := new_sender_bal;
      match to_bal with
      | Some x =>
        new_to_bal = builtin add x deposits;
        all_deposits[payee] := new_to_bal;
        e = { _eventname : "Deposit";  from : _sender ; payee : payee ; amount: _amount};
        event e 
      | None =>
        all_deposits[payee] := deposits;
        e = { _eventname : "Deposit";  from : _sender ; payee : payee ; amount: _amount};
        event e
       end
  | None =>
      all_deposits[payee] := deposits;
      to_bal<- all_deposits[_sender];
      match to_bal with
      | Some x =>
        new_to_bal = builtin add x deposits;
        all_deposits[payee] := new_to_bal;
        e = { _eventname : "Deposit";  from : _sender ; payee : payee ; amount: _amount};
        event e 
      | None =>
        all_deposits[payee] := deposits;
        e = { _eventname : "Deposit";  from : _sender ; payee : payee ; amount: _amount};
        event e
       end
    end
  | False =>
    e = { _eventname : "Error"; from : _sender ; code : notPrimary  };
    event e
  end
end


transition withdraw (payee : ByStr20)
  p <- _primary;
  noBal="no deposit done to payeee account";
  notPrimary="not primary";
  isPrimary=builtin eq _sender p;
  match isPrimary with
   | True =>
      payeeBal <- all_deposits [payee];
      match payeeBal with
       | Some b =>
        all_deposits [payee]:=_zero;
        msg = { _tag : "Main"; _recipient : _sender; _amount : b; payee : payee };
        msgs = one_msg msg;
        send msgs
     | None =>
        e = { _eventname : "Error"; from : _sender ; code : noBal  };
        event e
       end
   | False =>
      e = { _eventname : "Error"; from : _sender ; code : notPrimary  };
      event e
    end
end

