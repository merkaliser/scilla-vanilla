scilla_version 0

import BoolUtils

library ERC223Token

let one_msg =
    fun(msg : Message) =>
    let nil_msg=Nil {Message} in
    Cons {Message} msg nil_msg
let no_msg = Nil {Message}
let min_int =
  fun (a: Uint128) => fun(b: Uint128) =>
  let res =builtin lt a b in
  match res with 
  | True =>
    a 
  | False =>
    b
  end 
let equal_int=
  fun(a : Uint128) => fun(b:Uint128) =>
  let equal= builtin eq a b in
  match equal with
  | True =>True
  | False =>False
  end

let less_equal=
  fun (a:Uint128) => fun (b:Uint128)=>
  let less = builtin lt a b in
  match less with 
  | True =>True
  | False =>
    let equal=builtin eq a b in
    match equal with
    | True =>True
    | False =>False
    end
  end    
        
contract ERC223Token
(name: String,
symbol:String,
totalSupply:Uint128,
owner: ByStr20)


field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m owner totalSupply

field allowed : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128) 
field _totalSupply :Uint128 = totalSupply

transition name ()
e = { _eventname : "name"; _recipient : _sender; _amount : Uint128 0; message : name };
event e
end

transition symbol ()
e = { _eventname : "symbol"; _recipient : _sender; _amount : Uint128 0; message : symbol };
event e
end

transition totalSupply ()
t<-_totalSupply;
e = { _eventname : "total supply"; _recipient : _sender; _amount : Uint128 0; message : t };
event e
end

transition balanceOf(tokenOwner : ByStr20)
  
  val <- balances[tokenOwner];
  match val with
  | Some v =>
    e = { _eventname : "balanceOf"; _recipient : _sender; _amount : Uint128 0; balance : v };
    event e  
  | None =>
    e = { _eventname : "balanceOf"; _recipient : _sender; _amount : Uint128 0; message : "No balance found for given address" };
    event e  
  end
end
(*spender:address which owner wants to give access to transfer tokens*)
transition approve (spender : ByStr20, value : Uint128)
  sender_map <- allowed[_sender];
  match sender_map with
  | Some m =>    
    allowed[_sender][spender] := value;    
    e = { _eventname : "spenderapproved"; _recipient : _sender; _amount : Uint128 0; message : "spender approved" };
    event e     
  | None =>
    allowed[_sender][spender] := value;    
    e = { _eventname : "spenderapproved"; _recipient : _sender; _amount : Uint128 0; message : "spender approved" };
    event e
  end
end

transition safeApprove(spender : ByStr20 , currentValue : Uint128 , value : Uint128 )  
  sender_map <- allowed[_sender];
  match sender_map with
  | Some m =>
    allowed_to_spender_val<- allowed[_sender][spender];
    match allowed_to_spender_val with
    | Some val =>
      can_do = equal_int val currentValue;      
      match can_do with
      | True =>
        allowed[_sender][spender] := value;        
	e = { _eventname : "safe approved"; _recipient : _sender; _amount : Uint128 0; message : "Spender approved" };
	event e
      | False =>        
	e = { _eventname : "currentValue not equal"; _recipient : _sender; _amount : Uint128 0; message : "CurrentValue given is not equal to the tokens allowed to spender" };
	event e 
      end
    | None =>            
      e = { _eventname : "tokens not allowed"; _recipient : _sender; _amount : Uint128 0; message : "No tokens allowed to provided spender" };
      event e
    end    
  | None =>    
    e = { _eventname : "no spender foound"; _recipient : _sender; _amount : Uint128 0; message : "No spender exist" };
    event e
  end
end  
(*returns the number of tokens allowed by owner to spender*)


transition allowance(owner : ByStr20, spender : ByStr20)  
  allowed_by_owner <- allowed[owner];
  match allowed_by_owner with
  | Some m=>
    allowed_to_spender <-allowed[owner][spender];
    match allowed_to_spender with
    | Some m=>        
      e = { _eventname : "allowed to spender"; _recipient : _sender; _amount : Uint128 0; allowed_by_owner : m };
      event e
    | None =>       
      e = { _eventname : "noTokensAllowed"; _recipient : _sender; _amount : Uint128 0; message : "No tokens allowed to provided spender" };
      event e   
    end
  | None =>     
    e = { _eventname : "no spender found"; _recipient : _sender; _amount : Uint128 0; message : "No spender exist" };
    event e
  end
end  


transition transfer (to: ByStr20 , value:Uint128)  
  bal <- balances[_sender];
  match bal with 
  | Some b =>
    can_do = less_equal value b;
    match can_do with
    | True =>
      new_sender_bal=builtin sub b value;
      balances[_sender] := new_sender_bal;      
      to_bal <- balances[to];
      match to_bal with
      | Some x =>
        new_to_bal = builtin add x value;
        balances[to]:=new_to_bal;        
	e = { _eventname : "tokensTransferred"; _recipient : _sender; _amount : Uint128 0; transferred : value };
	event e
      | None =>
        balances[to]:= value;        
	e = { _eventname : "tokensTransferred"; _recipient : _sender; _amount : Uint128 0; transferred : value };
	event e
      end
    | False=>      
      e = { _eventname : "insufficientBalance"; _recipient : _sender; _amount : Uint128 0; message : "Insufficient balance" };
      event e
    end  
  | None =>     
    e = { _eventname : "noTokensFound"; _recipient : _sender; _amount : Uint128 0; message : "No balance found for given spender" };
    event e
  end
end  

transition burn(value : Uint128) 
  bal <- balances[_sender];
  match bal with
  | Some b =>
    can_do=less_equal value b;
    match can_do with
    | True=>
      new_balance=builtin sub b value;      
      balances[_sender]:=new_balance;
      ts <- _totalSupply;
      ts=builtin sub ts value;
      _totalSupply := ts;      
      e = { _eventname : "burned"; _recipient : _sender; _amount : Uint128 0; message : "burned" };
      event e
    | False =>      
      e = { _eventname : "insufficientBal"; _recipient : _sender; _amount : Uint128 0; message : "Insufficient balance cannot burn" };
      event e
    end
  | None=>      
    e = { _eventname : "BurnError"; _recipient : _sender; _amount : Uint128 0; message : "error" };
    event e
  end
end 

transition transferFrom (from : ByStr20, to : ByStr20, value : Uint128)  
  bal <- balances[from];
  (* Check if _sender has been authorized by "from" *)
  allowed_from <- allowed[from];
  match allowed_from with
  | Some m =>
    (* How many tokens has _sender been authorized to transfer, by "from" *)
    sender_allowed_from <- allowed[from][_sender];
    all = Pair { (Option Uint128) (Option Uint128)} bal sender_allowed_from;
    match all with
    | Pair (Some a) (Some b) =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int a b;
      can_do = less_equal value t;
      match can_do with
      | True =>
        (* tokens is what we should subtract from "from" and add to "to" *)
        new_from_bal = builtin sub a value;        
        balances[from] := new_from_bal;
        to_bal <- balances[to];
        match to_bal with
        | Some tb =>
          to_bal_new = builtin add tb value;          
          balances[to] := to_bal_new          
        | None =>
          (* "to" has no balance. So just set it to tokens *)          
          balances[to] := value          
        end;
        (* reduce "allowed" by "tokens" *)
        new_allowed = builtin sub b value;
        allowed[from][_sender] := new_allowed;        
	e = { _eventname : "transferFrom"; _recipient : _sender; _amount : Uint128 0; message : "transferred" };
	event e
      | False =>        
	e = { _eventname : "transferFromFailed"; _recipient : _sender; _amount : Uint128 0; message : "Tokens to transfer cannot be greater than available or authorized value" };
	event e
      end
    | _ =>      
      e = { _eventname : "transferFromError"; _recipient : _sender; _amount : Uint128 0; message : "Error" };
      event e
    end
  | None =>    
    e = { _eventname : "transferFromnotAllowed"; _recipient : _sender; _amount : Uint128 0; message : "Tokens not allowed by owner for given spender" };
    event e
  end
end  

transition burnFrom(from : ByStr20,value :Uint128)  
  bal <- balances[from];
  sender_allowed_from <- allowed[from][_sender];
  match bal with
  | Some a =>
    match sender_allowed_from with
    | Some b =>
      t = min_int a b;
      can_do=less_equal value t;
      match can_do with
      | True =>
        new_from_bal = builtin sub a value;        
        balances[from]:=new_from_bal;
        new_allowed=builtin sub b value;
        allowed[from][_sender]:= new_allowed;
        ts <- _totalSupply;
        ts=builtin sub ts value;
        _totalSupply := ts;        
        e = { _eventname : "burnFromBurned"; _recipient : _sender; _amount : Uint128 0; message : "Burned" };
        event e
      | False =>            
        e = { _eventname : "burnFromFailed"; _recipient : _sender; _amount : Uint128 0; message : "Insufficient balance cannot burn" };
        event e        
      end    
    | None =>         
      e = { _eventname : "burnFromError"; _recipient : _sender; _amount : Uint128 0; message : "Tokens not allowed by owner for given spender" };
      event e
    end
  | None =>    
    e = { _eventname : "burnFrom tokens_notallowed"; _recipient : _sender; _amount : Uint128 0; message : "Error" };
    event e
  end
end